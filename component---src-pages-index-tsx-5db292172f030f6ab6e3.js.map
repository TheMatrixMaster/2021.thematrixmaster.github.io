{"version":3,"file":"component---src-pages-index-tsx-5db292172f030f6ab6e3.js","mappings":"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","sources":["webpack://szl-portfolio/./node_modules/camelcase/index.js","webpack://szl-portfolio/../src/image-utils.ts","webpack://szl-portfolio/../src/components/hooks.ts","webpack://szl-portfolio/../src/components/picture.tsx","webpack://szl-portfolio/../src/components/layout-wrapper.tsx","webpack://szl-portfolio/../src/components/placeholder.tsx","webpack://szl-portfolio/../src/components/main-image.tsx","webpack://szl-portfolio/../src/components/gatsby-image.browser.tsx","webpack://szl-portfolio/../src/components/gatsby-image.server.tsx","webpack://szl-portfolio/../src/components/static-image.server.tsx","webpack://szl-portfolio/../src/components/static-image.tsx","webpack://szl-portfolio/./src/components/header.tsx","webpack://szl-portfolio/./src/components/social.tsx","webpack://szl-portfolio/./src/components/landing-page.tsx","webpack://szl-portfolio/./src/components/software-card.tsx","webpack://szl-portfolio/./src/components/software-page.tsx","webpack://szl-portfolio/./src/components/research-entry.tsx","webpack://szl-portfolio/./src/components/research-page.tsx","webpack://szl-portfolio/./src/components/career-entry.tsx","webpack://szl-portfolio/./src/components/career-page.tsx","webpack://szl-portfolio/./src/components/more-page.tsx","webpack://szl-portfolio/./src/pages/index.tsx","webpack://szl-portfolio/./node_modules/gatsby-plugin-mdx/index.js","webpack://szl-portfolio/./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/construct.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://szl-portfolio/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  var hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from 'react';\n\nimport { Link } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nconst Header = () => (\n  <header className={'header-bar'}>\n    <div>\n      <StaticImage\n        alt={'logo'}\n        aspectRatio={1}\n        className={'logo'}\n        src={'../static/images/sl-icon.png'}\n      />\n      <Link to=\"/#software\">Software</Link>\n      <Link to=\"/#research\">Research</Link>\n      <Link to=\"/#career\">Career</Link>\n      <Link to=\"/#more\">More</Link>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst SocialLinks = () => {\n  const { allSocialJson } = useStaticQuery(graphql`\n    {\n      allSocialJson {\n        edges {\n          node {\n            id\n            name\n            url\n            icon {\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <div className={'link-container'}>\n      {allSocialJson.edges.map(e => {\n        const { name, icon, url, id } = e.node;\n        return (\n          <a key={id} href={url} target={'_blank'}>\n            <img src={icon.publicURL} alt={name} />\n          </a>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default SocialLinks;\n","import * as React from 'react';\n\nimport Header from './header';\nimport SocialLinks from './social';\n\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\n\nconst LandingPage = ({ id }: { id: string }) => {\n  const { mdx } = useStaticQuery(graphql`\n    {\n      mdx(slug: { eq: \"mdx/aboutme\" }) {\n        id\n        body\n        frontmatter {\n          date(formatString: \"DD/MM/YYYY\")\n          title\n        }\n      }\n    }\n  `);\n\n  const { body, frontmatter } = mdx;\n\n  return (\n    <section id={id} className={'main-container'}>\n      <section className={'left-panel'}>\n        <Header />\n        <div className={'text-container'}>\n          <h3>Hey there!</h3>\n          <h1>\n            How's it <br /> going?\n          </h1>\n          <h3>I'm Stephen.</h3>\n\n          <div className={'roles'}>\n            <h5>Software developer</h5>\n            <h5>Neuroscience research trainee</h5>\n            <h5>Entrepreneur</h5>\n          </div>\n\n          <SocialLinks />\n        </div>\n      </section>\n      <section className={'right-panel'}>\n        <div className={'text-container'}>\n          <StaticImage\n            quality={100}\n            alt={'avatar'}\n            className={'avatar'}\n            src={'../static/images/avatar.png'}\n          />\n          <h2>{frontmatter.title}</h2>\n          <p className={'subtitle'}>Last updated {frontmatter.date}</p>\n          <MDXRenderer>{body}</MDXRenderer>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default LandingPage;\n","import * as React from 'react';\n\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\n\ntype SoftwareCardProps = {\n  id: string;\n  frontmatter: {\n    title: string;\n    year: string;\n    url: string;\n    icon?: IGatsbyImageData;\n  };\n  body: string;\n};\n\nconst SoftwareCard = ({ id, frontmatter, body }: SoftwareCardProps) => {\n  const image = getImage(frontmatter.icon);\n  return (\n    <a key={id} className={'card'} href={frontmatter.url} target={'_blank'}>\n      {image ? (\n        <GatsbyImage image={image} className={'icon'} alt={frontmatter.title} />\n      ) : (\n        <div className={'icon'} />\n      )}\n      <h2>{frontmatter.title}</h2>\n      <p className={'small'}>{frontmatter.year}</p>\n      <MDXRenderer>{body}</MDXRenderer>\n      <p className={'url small'}>{frontmatter.url}</p>\n    </a>\n  );\n};\n\nexport default SoftwareCard;\n","import * as React from 'react';\n\nimport { useStaticQuery, graphql } from 'gatsby';\nimport SoftwareCard from '../components/software-card';\n\nconst SoftwarePage = props => {\n  const { allMdx } = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: { slug: { regex: \"/^(mdx/software)/\" } }\n        sort: { fields: frontmatter___year, order: DESC }\n      ) {\n        edges {\n          node {\n            body\n            frontmatter {\n              year\n              title\n              url\n              icon {\n                childImageSharp {\n                  gatsbyImageData(height: 40, width: 40)\n                }\n              }\n            }\n            id\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <section {...props}>\n      <h1>Software</h1>\n      <div className={'flex-container'}>\n        {allMdx.edges.map(edge => {\n          const { id, frontmatter, body } = edge.node;\n          return (\n            <SoftwareCard\n              key={id}\n              id={id}\n              frontmatter={frontmatter}\n              body={body}\n            />\n          );\n        })}\n      </div>\n    </section>\n  );\n};\n\nexport default SoftwarePage;\n","import * as React from 'react';\n\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\n\ntype ResearchEntryProps = {\n  id: string;\n  frontmatter: {\n    title: string;\n    location: string;\n    start_date: string;\n    end_date: string;\n    lab_url?: string;\n  };\n  body: string;\n};\n\nconst ResearchEntry = ({ id, frontmatter, body }: ResearchEntryProps) => (\n  <div key={id} className={'research-entry'}>\n    <h3>\n      {frontmatter.lab_url ? (\n        <a href={frontmatter.lab_url}>{frontmatter.title}</a>\n      ) : (\n        frontmatter.title\n      )}{' '}\n      @ {frontmatter.location}\n    </h3>\n    <h5>\n      {frontmatter.start_date} - {frontmatter.end_date}\n    </h5>\n    <MDXRenderer>{body}</MDXRenderer>\n  </div>\n);\n\nexport default ResearchEntry;\n","import * as React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport ResearchEntry from './research-entry';\n\nconst ResearchPage = props => {\n  const data = useStaticQuery(graphql`\n    {\n      allMdx(\n        filter: { slug: { regex: \"/^(mdx/research)/\" } }\n        sort: { fields: frontmatter___sort_order, order: ASC }\n      ) {\n        edges {\n          node {\n            body\n            frontmatter {\n              title\n              location\n              start_date\n              end_date\n              lab_url\n            }\n            id\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <section {...props}>\n      <h1>Research</h1>\n      {data.allMdx.edges.map(edge => {\n        const { id, body, frontmatter } = edge.node;\n        return (\n          <ResearchEntry\n            key={id}\n            id={id}\n            frontmatter={frontmatter}\n            body={body}\n          />\n        );\n      })}\n    </section>\n  );\n};\n\nexport default ResearchPage;\n","import * as React from 'react';\n\ntype CareerEntryProps = {\n  title: string;\n  description: string;\n  start_time: string;\n  end_time: string;\n};\n\nconst CareerEntry = ({\n  title,\n  description,\n  start_time,\n  end_time,\n}: CareerEntryProps) => (\n  <div className={'career-entry'}>\n    <h2>{title}</h2>\n    <p>{description}</p>\n    <p className={'date'}>\n      {start_time} - {end_time}\n    </p>\n  </div>\n);\n\nexport default CareerEntry;\n","import { graphql, useStaticQuery } from 'gatsby';\nimport CareerEntry from './career-entry';\nimport * as React from 'react';\n\nconst CareerPage = props => {\n  const { allAwardsJson, allCareerJson, allEduJson } = useStaticQuery(graphql`\n    {\n      allAwardsJson {\n        edges {\n          node {\n            id\n            title\n            year(formatString: \"YY\")\n          }\n        }\n      }\n      allCareerJson {\n        edges {\n          node {\n            id\n            start_time\n            title\n            end_time\n            description\n          }\n        }\n      }\n      allEduJson {\n        edges {\n          node {\n            id\n            end_time\n            description\n            start_time\n            title\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <section {...props}>\n      <section>\n        <h1>Career</h1>\n        {allCareerJson.edges.map(edge => {\n          const { id, title, description, start_time, end_time } = edge.node;\n          return (\n            <CareerEntry\n              key={id}\n              title={title}\n              description={description}\n              start_time={start_time}\n              end_time={end_time}\n            />\n          );\n        })}\n      </section>\n      <section>\n        <h1>Education</h1>\n        {allEduJson.edges.map(edge => {\n          const { id, title, description, start_time, end_time } = edge.node;\n          return (\n            <CareerEntry\n              key={id}\n              title={title}\n              description={description}\n              start_time={start_time}\n              end_time={end_time}\n            />\n          );\n        })}\n      </section>\n      <section>\n        <h1>Awards</h1>\n        {allAwardsJson.edges.map(edge => {\n          const { id, title, year } = edge.node;\n          return (\n            <div key={id}>\n              <p>\n                {title} '{year}\n              </p>\n            </div>\n          );\n        })}\n      </section>\n    </section>\n  );\n};\n\nexport default CareerPage;\n","import { graphql, useStaticQuery } from 'gatsby';\nimport { MDXRenderer } from 'gatsby-plugin-mdx';\nimport * as React from 'react';\n\nconst MorePage = props => {\n  const { mdx } = useStaticQuery(graphql`\n    {\n      mdx(slug: { eq: \"mdx/aboutthissite\" }) {\n        id\n        body\n        frontmatter {\n          date(formatString: \"DD/MM/YYYY\")\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <section {...props}>\n      <h1>How I built this site...</h1>\n      <MDXRenderer>{mdx.body}</MDXRenderer>\n    </section>\n  );\n};\n\nexport default MorePage;\n","import * as React from 'react';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\nimport LandingPage from '../components/landing-page';\nimport SoftwarePage from '../components/software-page';\nimport ResearchPage from '../components/research-page';\nimport CareerPage from '../components/career-page';\nimport MorePage from '../components/more-page';\n\nconst IndexPage = () => (\n  <Layout>\n    <Seo title=\"Home\" />\n    <LandingPage id={'home'} />\n    <SoftwarePage id={'software'} className={'page'} />\n    <ResearchPage id={'research'} className={'page'} />\n    <CareerPage id={'career'} className={'page grid-container'} />\n    <MorePage id={'more'} className={'page'} />\n  </Layout>\n);\n\nexport default IndexPage;\n","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n  return _construct.apply(null, arguments);\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","a","children","props","Fragment","Sizer","t","srcSet","decoding","undefined","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","e","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","aspectRatio","Link","to","allSocialJson","useStaticQuery","edges","name","icon","url","id","href","target","publicURL","mdx","body","frontmatter","Header","SocialLinks","quality","title","date","MDXRenderer","getImage","year","allMdx","edge","SoftwareCard","lab_url","location","start_date","end_date","data","ResearchEntry","description","start_time","end_time","allAwardsJson","allCareerJson","allEduJson","CareerEntry","Layout","Seo","LandingPage","SoftwarePage","ResearchPage","CareerPage","MorePage","require","useMDXScope","scope","mdxScope","End","fullScope","keys","values","Function","createElement","arr","len","arr2","__esModule","arrayLikeToArray","setPrototypeOf","isNativeReflectConstruct","_construct","Parent","args","Class","Reflect","construct","bind","push","apply","instance","arguments","obj","value","defineProperty","enumerable","configurable","writable","sham","Proxy","valueOf","call","iter","Symbol","iterator","from","source","excluded","sourceKeys","indexOf","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","toString","constructor"],"sourceRoot":""}